// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ModifyChunk

#include "Assets\Scripts\Chunk\Shader\NoiseInclude.compute"

RWStructuredBuffer<float3> Vertices;
float3 origin;

float4x4 localToWorldMatrix;
float4x4 worldToLocalMatrix;

float planetSize;
float scale;
float lacunarity;
float persistance;
float maxTerrainHeight;

uint octaves;
uint seed;

[numthreads(1, 1, 1)]
void ModifyChunk(uint3 id : SV_DispatchThreadID)
{
	//Index of current thread
	uint index = id.x + id.y * 33;
	
	//float3 offset = float3(-1, 0, 1);
	
	//Convert Vertices[index] to float4 so can be modified by matrix
	float4 vertex = float4(Vertices[index], 1);
	float4 worldPos = mul(localToWorldMatrix, vertex);
	
	//Set Vertices[x] on the radius of the planet (pls work)
	float3 normal = normalize(worldPos.xyz);
	worldPos.xyz = normal * planetSize;
		
	//Noise shit
	float frequency = 1;
	float amplitude = 1;
	float noiseHeight = 0;
	float maxNoise = 0;
		
	[loop] //All octaves
	for (uint o = 0; o < octaves; o++)
	{
		float3 noisePos = (worldPos.xyz / scale) * frequency;
		noisePos.xyz += seed;
		
		noiseHeight += snoise(noisePos) * amplitude;
		maxNoise += amplitude;

		amplitude *= persistance;
		frequency *= lacunarity;
	}
	
	//Get the noise between 0 and 1 for ease of use
	float noise = noiseHeight / maxNoise;
	float powNoise = pow(noise, 2);
	
	//Add the noise to the y axis of the vertice and multiply it by the elevation
	worldPos.xyz += normal * powNoise * maxTerrainHeight;
		
	Vertices[index] = mul(worldToLocalMatrix, worldPos).xyz;
}
